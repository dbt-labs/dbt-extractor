name: CI

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish to PyPI (true/false)'
        required: true
        default: 'false'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-D warnings"
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: build 
          args: --tests

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  python-macos:
    needs: [build, test, fmt]
    name: Build macos
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Build wheels - x86_64
        uses: messense/maturin-action@v1
        with:
          target: x86_64
          args: --release --out dist
      - name: Install built wheel - x86_64
        run: |
          pip install dbt_extractor --no-index --find-links dist --force-reinstall
          python -c "import dbt_extractor"
      # - name: Build wheels - universal2
      #   uses: messense/maturin-action@v1
      #   with:
      #     args: --release --universal2 --out dist --no-sdist -m python/Cargo.toml
      # - name: Install built wheel - universal2
      #   run: |
      #     pip install crfs --no-index --find-links dist --force-reinstall
      #     python -c "import crfs"
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  python-windows:
    needs: [build, test, fmt]
    name: Build windows ${{ matrix.target }}
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
          architecture: ${{ matrix.target }}
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --no-sdist
      - name: Install built wheel
        run: |
          pip install dbt_extractor --no-index --find-links dist --force-reinstall
          python -c "import dbt_extractor"
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist
  
  python-linux:
    needs: [build, test, fmt]
    name: Build linux ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, i686]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Build Wheels
      uses: messense/maturin-action@v1
      with:
        target: ${{ matrix.target }}
        manylinux: auto
        args: --release --out dist --no-sdist
    - name: Install built wheel
      if: matrix.target == 'x86_64'
      run: |
        pip install dbt_extractor --no-index --find-links dist --force-reinstall
        python -c "import dbt_extractor"
    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: dist

  # linux-cross:
  #   needs: [build, test, fmt]
  #   name: Build linux-cross ${{ matrix.target }}
  #   runs-on: ubuntu-latest
  #   env:
  #     PYO3_CROSS_LIB_DIR: '/opt/python/cp38-cp38/lib'
  #   strategy:
  #     matrix:
  #       target: [aarch64, armv7, s390x, ppc64le, ppc64]
  #   steps:
  #   - uses: actions/checkout@v2
  #   - uses: actions/setup-python@v2
  #     with:
  #       python-version: 3.9
  #   - name: Build Wheels
  #     uses: messense/maturin-action@v1
  #     with:
  #       target: ${{ matrix.target }}
  #       manylinux: auto
  #       args: --release --out dist --no-sdist
  #   - uses: uraimo/run-on-arch-action@v2.0.5
  #     if: matrix.target != 'ppc64'
  #     name: Install built wheel
  #     with:
  #       arch: ${{ matrix.target }}
  #       distro: ubuntu18.04
  #       githubToken: ${{ github.token }}
  #       # Mount the dist directory as /artifacts in the container
  #       dockerRunArgs: |
  #         --volume "${PWD}/dist:/artifacts"
  #       install: |
  #         apt-get update
  #         apt-get install -y --no-install-recommends python3 python3-pip
  #         pip3 install -U pip
  #       run: |
  #         ls -lrth /artifacts
  #         pip3 install dbt_extractor --no-index --find-links /artifacts --force-reinstall
  #         python3 -c "import dbt_extractor"
  #   - name: Upload wheels
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: wheels
  #       path: dist
  publish:
    needs: [python-macos, python-windows, python-linux]
    name: Publish to PyPI
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.publish == 'true' }}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Publish to PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *
