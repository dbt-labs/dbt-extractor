name: Release

on:
  workflow_dispatch:
    inputs:
      publish:
        description: "Publish to PyPI Production (true/false)"
        required: true
        default: "false"

env:
  python-version: "3.9"

jobs:
  macos:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.python-version }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true

      - name: Build wheels - x86_64
        uses: PyO3/maturin-action@v1
        # NOTE: This build step also generates the source distribution (sdist),
        # so if it is removed we will need to generate that on another of the
        # build steps.
        with:
          command: build
          target: x86_64
          args: --release --out dist --sdist

      - name: Build wheels - universal2
        uses: PyO3/maturin-action@v1
        with:
          args: --release --target universal2-apple-darwin --out dist

      - name: "[Test] Install built wheel - universal2"
        run: |
          pip install dbt-extractor --no-index --find-links dist --force-reinstall
          python -c "import dbt_extractor"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: macos-wheels
          path: dist

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64, x86]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.python-version }}
          architecture: ${{ matrix.target }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist

      - name: Install built wheel
        run: |
          pip install dbt-extractor --no-index --find-links dist --force-reinstall
          python -c "import dbt_extractor"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.target }}-wheels
          path: dist

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, i686]
    steps:
      - name: "Chekout repo"
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.python-version }}
          architecture: x64

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist

      - name: Install built wheel
        if: matrix.target == 'x86_64'
        run: |
          pip install dbt-extractor --no-index --find-links dist --force-reinstall
          python -c "import dbt_extractor"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.target }}-wheels
          path: dist

  linux-cross:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [aarch64, armv7, s390x, ppc64le, ppc64]
    steps:
      - name: "Chekout repo"
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.python-version }}

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: linux-cross-${{ matrix.target }}-wheels
          path: dist

  musllinux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - i686-unknown-linux-musl
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.python-version }}
          architecture: x64

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: musllinux_1_2
          args: --release --out dist

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: musllinux-${{ matrix.target }}-wheels
          path: dist

  musllinux-cross:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - target: aarch64-unknown-linux-musl
            arch: aarch64
          - target: armv7-unknown-linux-musleabihf
            arch: armv7
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
            python-version: ${{ env.python-version }}

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          manylinux: musllinux_1_2
          args: --release --out dist

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: musllinux-${{ matrix.platform.arch }}-wheels
          path: dist

  publish-test:
    if: ${{ github.event.inputs.publish != 'true' }}
    needs: [macos, windows, linux, linux-cross, musllinux, musllinux-cross]
    name: Publish to PyPI Test
    environment:
      name: pypitest
    runs-on: ubuntu-latest
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Show wheels generated
        run: ls -lh dist

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.python-version }}

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  publish-prod:
    if: ${{ github.event.inputs.publish == 'true' }}
    needs: [macos, windows, linux, linux-cross, musllinux, musllinux-cross]
    name: Publish to PyPI
    environment:
      name: pypiprod
    runs-on: ubuntu-latest
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Show wheels generated
        run: ls -lh dist

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.python-version }}

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
